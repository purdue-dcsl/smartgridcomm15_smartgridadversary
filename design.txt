This document contains major design decisions and outstanding issues for the code.  To be used as a reference 
when writing the implementation section of the paper.

Plant.java:

The plant class simulates the aggregate production of all plants in the grid.  We are assuming that this 
follows a gaussian distribution in aggregate (ie sufficiently many small sources).

Constructor:  Takes two arguments.  The absolute value of both the mean and the stddev for the gaussian
distribution of the plant.

produce:  returns the next random number, per the distribution established by the constructor.

--------

Bucket.java

Buckets have 4 values: an upper and lower threshold for the amount of power they can consume in a time step (ie
   take in or give back to the grid) and and upper and lower value for the amount of energy they can store.

the agility and reserve functions return the metrics defined in the load taxonomy paper.

Consume does some sanity checking on bounds, and then updates the current energy state.

----------

Constrained.java

This is an interface that both bakeries and batteries implement, which allows them to be treated 
as equivalent for some of the calculations (ie forced amount of power to distribute, or determining
who gets how much power if none is forced).

----------

Battery.java

Batteries have a maximum amount of energy that they require, and a maximum amount of power that they can 
consume in a given time step.

agility and forced implement the requried calculations from the taxonomy paper.


--------

Bakery.java

Bakeries have an amount of energy that they requrie, as well an amount of power they require each time step
while running.  They also have to be run continuously, and have an end time that they must finish by.

includes agility() and forced() methods per the taxonomy paper, and some other bookkeeping ones that are
useful for enforcing the constraint.  

--------

Simulator.java

The big kahuna.  Several knobs that we can tune with are global variables:

The number of bakeries, batteries, and buckets.
The mean and stddev for the virtual power plant
How big the stddev of customers energy requirements are, as a percentage of the mean.
How much the max power a customer can consume in a given time step varies.

The simulation run time is the only command line argument.  This seemed likely to change more often, so I 
pulled it out of the source proper.

The next point is how to pick the required power / energy numbers for the customers.  I calculate the total
energy that they plant will produce on average: ie runtime * the mean of the
power plant.  I then divide this by the number of customers, and use that as
the mean energy required for each customer.  The actual energy required by a
given customer comes from a Normal Distribution with the calculated mean, and
the tunable standard deviation (knob is stddev as percentage of the mean).  

The next step is to create all the customers.  The energy required is as
described above.  I next calculate the minimum amount of power the bakery must
be able to consume to be able to finish during the alloted simulation time
(ie. required energy / Time).  The amount of power the bakery can actually
consume per time step is uniform over the range [min, min + range].  Range is
a hard coded knob currently, it may need to become more flexible.  My end time 
is currently uniform over the range of possible times, but that doesn't make 
since.  Needs to be based on the range of plausible end times (ie, what is the
earliest it could finish to the end).

Batteries are the same as bakeries in terms of power / energy constraint.

Buckets requried energy is calculated the same way, as is the amount of power
they can give / receive in a time interval.  They can go negative on energy
though, I chose 0 - max_e as the lower bound.

The rest of the code implements the reference (in the taxonomy paper)
scheduling algorithm.
